#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.2.0
# Product:       stcc4
# Model-Version: 3.2.0
#

import argparse
import time
from sensirion_i2c_driver import I2cConnection, CrcCalculator
from sensirion_shdlc_driver import ShdlcSerialPort, ShdlcConnection
from sensirion_shdlc_sensorbridge import (SensorBridgePort,
                                          SensorBridgeShdlcDevice,
                                          SensorBridgeI2cProxy)
from sensirion_driver_adapters.i2c_adapter.i2c_channel import I2cChannel
from sensirion_i2c_stcc4.device import Stcc4Device

parser = argparse.ArgumentParser()
parser.add_argument('--serial-port', '-p', default='COM1')
args = parser.parse_args()

with ShdlcSerialPort(port=args.serial_port, baudrate=460800) as port:
    bridge = SensorBridgeShdlcDevice(ShdlcConnection(port), slave_address=0)
    bridge.set_i2c_frequency(SensorBridgePort.ONE, frequency=100e3)
    bridge.set_supply_voltage(SensorBridgePort.ONE, voltage=3.3)
    bridge.switch_supply_on(SensorBridgePort.ONE)
    i2c_transceiver = SensorBridgeI2cProxy(bridge, port=SensorBridgePort.ONE)
    channel = I2cChannel(I2cConnection(i2c_transceiver),
                         slave_address=0x64,
                         crc=CrcCalculator(8, 0x31, 0xff, 0x0))
    sensor = Stcc4Device(channel)
    sensor.stop_continuous_measurement()
    (product_id, serial_number
     ) = sensor.get_product_id()
    print(f"product_id: {product_id}; "
          f"serial_number: {serial_number}; "
          )
    sensor.start_continuous_measurement()
    for i in range(50):
        try:
            time.sleep(1.0)
            (co2_concentration, temperature, relative_humidity, sensor_status
             ) = sensor.read_measurement()
            print(f"co2_concentration: {co2_concentration}; "
                  f"temperature: {temperature}; "
                  f"relative_humidity: {relative_humidity}; "
                  f"sensor_status: {sensor_status}; "
                  )
        except BaseException:
            continue
    sensor.stop_continuous_measurement()
