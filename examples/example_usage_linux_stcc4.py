#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.2.0
# Product:       stcc4
# Model-Version: 3.4.0
#

import argparse
import time
from sensirion_i2c_driver import LinuxI2cTransceiver, I2cConnection, CrcCalculator
from sensirion_driver_adapters.i2c_adapter.i2c_channel import I2cChannel
from sensirion_i2c_stcc4.device import Stcc4Device

parser = argparse.ArgumentParser()
parser.add_argument('--i2c-port', '-p', default='/dev/i2c-1')
args = parser.parse_args()

with LinuxI2cTransceiver(args.i2c_port) as i2c_transceiver:
    channel = I2cChannel(I2cConnection(i2c_transceiver),
                         slave_address=0x64,
                         crc=CrcCalculator(8, 0x31, 0xff, 0x0))
    sensor = Stcc4Device(channel)
    sensor.stop_continuous_measurement()
    (product_id, serial_number) = sensor.get_product_id()
    print(f"product_id: {product_id}; serial_number: {serial_number}; ")
    sensor.start_continuous_measurement()
    for i in range(50):
        time.sleep(1.0)
        try:
            (co2_concentration, temperature, relative_humidity, sensor_status) = sensor.read_measurement()
        except BaseException:
            # Read can fail in case of clock shift, datasheet suggests to retry after 150ms
            time.sleep(0.15)
            try:
                (co2_concentration, temperature, relative_humidity, sensor_status) = sensor.read_measurement()
            except BaseException:
                continue

        print(f"co2_concentration: {co2_concentration}; "
              f"temperature: {temperature}; "
              f"relative_humidity: {relative_humidity}; "
              f"sensor_status: {sensor_status}; ")

    sensor.stop_continuous_measurement()
