#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.2.0
# Product:       stcc4
# Model-Version: 3.4.0
#

import argparse
import time
from sensirion_i2c_driver import LinuxI2cTransceiver, I2cConnection, CrcCalculator
from sensirion_driver_adapters.i2c_adapter.i2c_channel import I2cChannel
from sensirion_i2c_stcc4.device import Stcc4Device

parser = argparse.ArgumentParser()
parser.add_argument('--i2c-port', '-p', default='/dev/i2c-1')
args = parser.parse_args()

with LinuxI2cTransceiver(args.i2c_port) as i2c_transceiver:
    channel = I2cChannel(I2cConnection(i2c_transceiver),
                         slave_address=0x64,
                         crc=CrcCalculator(8, 0x31, 0xff, 0x0))
    sensor = Stcc4Device(channel)
    time.sleep(0.006)

    # Ensure sensor is in idle state
    sensor.exit_sleep_mode()
    sensor.stop_continuous_measurement()

    # Enter sleep mode
    sensor.enter_sleep_mode()
    for i in range(100):

        #     Measure every 10 seconds.
        time.sleep(10.0)

        #     Exit sleep mode to put the sensor into idle mode
        #     to be able to perform a single shot measurement
        sensor.exit_sleep_mode()

        #     If humidity/temperature and/or pressure compensation is
        #     desired, you should call the respective compensation
        #     functions here. Check-out the header file for the definition
        #     of the compensation functions.

        #     Perform a single shot measurement and read the sensor data
        sensor.measure_single_shot()
        (co2_concentration, temperature, relative_humidity, status
         ) = sensor.read_measurement()

        #     Power down the sensor to reduce power consumption.
        sensor.enter_sleep_mode()

        #     Print results as physical unit.
        print(f"CO2 concentration [ppm] = {co2_concentration}"
              )
        print(f"Temperature [Â°C] = {temperature}"
              )
        print(f"Humidity [RH] = {relative_humidity}"
              )
        print(f"Status = {status}"
              )
